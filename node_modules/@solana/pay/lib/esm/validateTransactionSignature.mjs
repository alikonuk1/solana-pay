import { getAssociatedTokenAddress } from '@solana/spl-token';
import { LAMPORTS_PER_SOL, } from '@solana/web3.js';
import BigNumber from 'bignumber.js';
/**
 * Thrown when a transaction doesn't contain a valid Solana Pay transfer.
 */
export class ValidateTransactionSignatureError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'ValidateTransactionSignatureError';
    }
}
/**
 * Validate that a given transaction signature corresponds with a transaction containing a valid Solana Pay transfer.
 *
 * @param connection - A connection to the cluster.
 * @param signature -  The signature to validate.
 * @param recipient - `recipient` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#recipient)
 * @param amount - `amount` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#amount)
 * @param splToken - `splToken` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#spl-token)
 * @param reference -`reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference)
 * @param {Finality} finality - A subset of Commitment levels, which are at least optimistically confirmed
 */
export async function validateTransactionSignature(connection, signature, recipient, amount, splToken, reference, finality) {
    var _a, _b;
    const response = await connection.getTransaction(signature, { commitment: finality });
    if (!response)
        throw new ValidateTransactionSignatureError('not found');
    if (!response.meta)
        throw new ValidateTransactionSignatureError('missing meta');
    if (response.meta.err)
        throw response.meta.err;
    let preAmount, postAmount;
    if (!splToken) {
        const accountIndex = response.transaction.message.accountKeys.findIndex((pubkey) => pubkey.equals(recipient));
        if (accountIndex === -1)
            throw new ValidateTransactionSignatureError('recipient not found');
        preAmount = new BigNumber(response.meta.preBalances[accountIndex]).div(LAMPORTS_PER_SOL);
        postAmount = new BigNumber(response.meta.postBalances[accountIndex]).div(LAMPORTS_PER_SOL);
    }
    else {
        const recipientATA = await getAssociatedTokenAddress(splToken, recipient);
        const accountIndex = response.transaction.message.accountKeys.findIndex((pubkey) => pubkey.equals(recipientATA));
        if (accountIndex === -1)
            throw new ValidateTransactionSignatureError('recipient not found');
        const preBalance = (_a = response.meta.preTokenBalances) === null || _a === void 0 ? void 0 : _a.find((x) => x.accountIndex === accountIndex);
        const postBalance = (_b = response.meta.postTokenBalances) === null || _b === void 0 ? void 0 : _b.find((x) => x.accountIndex === accountIndex);
        preAmount = new BigNumber((preBalance === null || preBalance === void 0 ? void 0 : preBalance.uiTokenAmount.uiAmountString) || 0);
        postAmount = new BigNumber((postBalance === null || postBalance === void 0 ? void 0 : postBalance.uiTokenAmount.uiAmountString) || 0);
    }
    if (postAmount.minus(preAmount).lt(amount))
        throw new ValidateTransactionSignatureError('amount not transferred');
    if (reference) {
        if (!Array.isArray(reference)) {
            reference = [reference];
        }
        for (const pubkey of reference) {
            if (!response.transaction.message.accountKeys.some((accountKey) => accountKey.equals(pubkey)))
                throw new ValidateTransactionSignatureError('reference not found');
        }
    }
    return response;
}
//# sourceMappingURL=validateTransactionSignature.js.map