import { URL_PROTOCOL } from './constants.mjs';
/**
 * Encode a Solana Pay URL from required and optional components.
 *
 * @param {EncodeURLComponents} components
 *
 * @param components.recipient
 * @param components.amount
 * @param components.splToken
 * @param components.reference
 * @param components.label
 * @param components.message
 * @param components.memo
 */
export function encodeURL({ recipient, ...params }) {
    let url = URL_PROTOCOL + encodeURIComponent(recipient.toBase58());
    const encodedParams = encodeURLParams(params);
    if (encodedParams) {
        url += '?' + encodedParams;
    }
    return url;
}
function encodeURLParams({ amount, splToken, reference, label, message, memo }) {
    const params = [];
    if (amount) {
        params.push(['amount', amount.toFixed(amount.decimalPlaces())]);
    }
    if (splToken) {
        params.push(['spl-token', splToken.toBase58()]);
    }
    if (reference) {
        if (!Array.isArray(reference)) {
            reference = [reference];
        }
        for (const pubkey of reference) {
            params.push(['reference', pubkey.toBase58()]);
        }
    }
    if (label) {
        params.push(['label', label]);
    }
    if (message) {
        params.push(['message', message]);
    }
    if (memo) {
        params.push(['memo', memo]);
    }
    return params.map(([key, value]) => `${key}=${encodeURIComponent(value)}`).join('&');
}
//# sourceMappingURL=encodeURL.js.map