"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findTransactionSignature = exports.FindTransactionSignatureError = void 0;
/**
 * Thrown when no transaction signature can be found referencing a given public key.
 */
class FindTransactionSignatureError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'FindTransactionSignatureError';
    }
}
exports.FindTransactionSignatureError = FindTransactionSignatureError;
/**
 * Find the oldest transaction signature referencing a given public key.
 *
 * @throws if signature can't be found
 *
 * @param connection - A connection to the cluster.
 * @param reference - `reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference)
 * @param {SignaturesForAddressOptions} options - Options for `getSignaturesForAddress`.
 * @param {Finality} finality - A subset of Commitment levels, which are at least optimistically confirmed.
 */
function findTransactionSignature(connection, reference, options, finality) {
    return __awaiter(this, void 0, void 0, function* () {
        const signatures = yield connection.getSignaturesForAddress(reference, options, finality);
        const length = signatures.length;
        if (!length)
            throw new FindTransactionSignatureError('not found');
        // If multiple transaction signatures are found within the limit, return the oldest one.
        if (length < ((options === null || options === void 0 ? void 0 : options.limit) || 1000))
            return signatures[length - 1];
        try {
            // In the unlikely event that more signatures than the limit are found, recursively find the oldest one.
            return yield findTransactionSignature(connection, reference, options, finality);
        }
        catch (error) {
            if (error instanceof FindTransactionSignatureError)
                return signatures[length - 1];
            throw error;
        }
    });
}
exports.findTransactionSignature = findTransactionSignature;
//# sourceMappingURL=findTransactionSignature.js.map