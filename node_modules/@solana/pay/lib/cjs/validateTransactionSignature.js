"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateTransactionSignature = exports.ValidateTransactionSignatureError = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
/**
 * Thrown when a transaction doesn't contain a valid Solana Pay transfer.
 */
class ValidateTransactionSignatureError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'ValidateTransactionSignatureError';
    }
}
exports.ValidateTransactionSignatureError = ValidateTransactionSignatureError;
/**
 * Validate that a given transaction signature corresponds with a transaction containing a valid Solana Pay transfer.
 *
 * @param connection - A connection to the cluster.
 * @param signature -  The signature to validate.
 * @param recipient - `recipient` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#recipient)
 * @param amount - `amount` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#amount)
 * @param splToken - `splToken` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#spl-token)
 * @param reference -`reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference)
 * @param {Finality} finality - A subset of Commitment levels, which are at least optimistically confirmed
 */
function validateTransactionSignature(connection, signature, recipient, amount, splToken, reference, finality) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield connection.getTransaction(signature, { commitment: finality });
        if (!response)
            throw new ValidateTransactionSignatureError('not found');
        if (!response.meta)
            throw new ValidateTransactionSignatureError('missing meta');
        if (response.meta.err)
            throw response.meta.err;
        let preAmount, postAmount;
        if (!splToken) {
            const accountIndex = response.transaction.message.accountKeys.findIndex((pubkey) => pubkey.equals(recipient));
            if (accountIndex === -1)
                throw new ValidateTransactionSignatureError('recipient not found');
            preAmount = new bignumber_js_1.default(response.meta.preBalances[accountIndex]).div(web3_js_1.LAMPORTS_PER_SOL);
            postAmount = new bignumber_js_1.default(response.meta.postBalances[accountIndex]).div(web3_js_1.LAMPORTS_PER_SOL);
        }
        else {
            const recipientATA = yield (0, spl_token_1.getAssociatedTokenAddress)(splToken, recipient);
            const accountIndex = response.transaction.message.accountKeys.findIndex((pubkey) => pubkey.equals(recipientATA));
            if (accountIndex === -1)
                throw new ValidateTransactionSignatureError('recipient not found');
            const preBalance = (_a = response.meta.preTokenBalances) === null || _a === void 0 ? void 0 : _a.find((x) => x.accountIndex === accountIndex);
            const postBalance = (_b = response.meta.postTokenBalances) === null || _b === void 0 ? void 0 : _b.find((x) => x.accountIndex === accountIndex);
            preAmount = new bignumber_js_1.default((preBalance === null || preBalance === void 0 ? void 0 : preBalance.uiTokenAmount.uiAmountString) || 0);
            postAmount = new bignumber_js_1.default((postBalance === null || postBalance === void 0 ? void 0 : postBalance.uiTokenAmount.uiAmountString) || 0);
        }
        if (postAmount.minus(preAmount).lt(amount))
            throw new ValidateTransactionSignatureError('amount not transferred');
        if (reference) {
            if (!Array.isArray(reference)) {
                reference = [reference];
            }
            for (const pubkey of reference) {
                if (!response.transaction.message.accountKeys.some((accountKey) => accountKey.equals(pubkey)))
                    throw new ValidateTransactionSignatureError('reference not found');
            }
        }
        return response;
    });
}
exports.validateTransactionSignature = validateTransactionSignature;
//# sourceMappingURL=validateTransactionSignature.js.map