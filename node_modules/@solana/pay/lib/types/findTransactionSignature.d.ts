import { ConfirmedSignatureInfo, Connection, Finality, PublicKey, SignaturesForAddressOptions } from '@solana/web3.js';
/**
 * Thrown when no transaction signature can be found referencing a given public key.
 */
export declare class FindTransactionSignatureError extends Error {
    name: string;
}
/**
 * Find the oldest transaction signature referencing a given public key.
 *
 * @throws if signature can't be found
 *
 * @param connection - A connection to the cluster.
 * @param reference - `reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference)
 * @param {SignaturesForAddressOptions} options - Options for `getSignaturesForAddress`.
 * @param {Finality} finality - A subset of Commitment levels, which are at least optimistically confirmed.
 */
export declare function findTransactionSignature(connection: Connection, reference: PublicKey, options?: SignaturesForAddressOptions, finality?: Finality): Promise<ConfirmedSignatureInfo>;
