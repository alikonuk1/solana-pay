import { Connection, Finality, PublicKey, TransactionResponse, TransactionSignature } from '@solana/web3.js';
import BigNumber from 'bignumber.js';
/**
 * Thrown when a transaction doesn't contain a valid Solana Pay transfer.
 */
export declare class ValidateTransactionSignatureError extends Error {
    name: string;
}
/**
 * Validate that a given transaction signature corresponds with a transaction containing a valid Solana Pay transfer.
 *
 * @param connection - A connection to the cluster.
 * @param signature -  The signature to validate.
 * @param recipient - `recipient` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#recipient)
 * @param amount - `amount` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#amount)
 * @param splToken - `splToken` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#spl-token)
 * @param reference -`reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference)
 * @param {Finality} finality - A subset of Commitment levels, which are at least optimistically confirmed
 */
export declare function validateTransactionSignature(connection: Connection, signature: TransactionSignature, recipient: PublicKey, amount: BigNumber, splToken?: PublicKey, reference?: PublicKey | PublicKey[], finality?: Finality): Promise<TransactionResponse>;
