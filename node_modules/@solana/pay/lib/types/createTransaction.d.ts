import { Connection, PublicKey, Transaction } from '@solana/web3.js';
import BigNumber from 'bignumber.js';
/**
 * Thrown when a valid transaction can't be created from the inputs provided.
 */
export declare class CreateTransactionError extends Error {
    name: string;
}
/**
 * Optional parameters for creating a Solana Pay transaction.
 */
export interface CreateTransactionParams {
    /** `splToken` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#spl-token) */
    splToken?: PublicKey;
    /** `reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference) */
    reference?: PublicKey | PublicKey[];
    /** `memo` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#memo) */
    memo?: string;
}
/**
 * Create a Solana Pay transaction.
 *
 * **Reference** implementation for wallet providers.
 *
 * @param connection - A connection to the cluster.
 * @param payer - `PublicKey` of the payer.
 * @param recipient - `recipient` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#recipient)
 * @param amount - `amount` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#amount)
 * @param {CreateTransactionParams} createTransactionParams - Additional parameters
 * @param createTransactionParams.splToken
 * @param createTransactionParams.reference
 * @param createTransactionParams.memo
 */
export declare function createTransaction(connection: Connection, payer: PublicKey, recipient: PublicKey, amount: BigNumber, { splToken, reference, memo }?: CreateTransactionParams): Promise<Transaction>;
